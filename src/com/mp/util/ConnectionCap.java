package com.mp.util;

import java.io.*;
import java.util.*;
import java.sql.*;

import com.mp.util.*;
import com.mp.exception.*;

/**
 * <pre>
 * 프로그램유형 : Util(java)
 * 프로그램명   : ConnectionCap.java
 * Version      : 1.3
 * 작성일       : 2004/06/09
 * 작성자       : 오범석
 * 수정일       : 
 * 수정자       : 
 *
 * 설명         : java.sql.Connection을 재구성한다.
 *				  기존의 Connection의 기능을 그대로 구현한다.
 *				  COMPATIBILITY : JDK 1.4.1
 *
 * 프로젝트명   : 표준콤포넌트
 * Copyright    : (주)다코시스템
 * </pre>
 */
public abstract class ConnectionCap implements java.sql.Connection {

	/** Connection				*/
	private Connection con = null;

	public ConnectionCap(String drivername, String url, 
								String id, String password) throws SQLException, ClassNotFoundException {
		setConnection(drivername, url, id, password);
	}

	public ConnectionCap(Connection connection) throws SQLException {
		setConnection(connection);
	}

	public void setConnection(String drivername, String url, 
								String id, String password) throws SQLException, ClassNotFoundException {		
	   	Class.forName(drivername);
   	    con = DriverManager.getConnection(url,id,password);
	}

	public void setConnection(Connection connection) throws SQLException {		
   	    con = connection;
	}

	public void clearWarnings() throws SQLException {
		con.clearWarnings();
	}	

	public void close() throws SQLException {
		con.close();
	}

	public void commit() throws SQLException {
		con.commit();
	}

	public Statement createStatement() throws SQLException {
		return con.createStatement();	
	}

	public Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {
		return con.createStatement(resultSetType,resultSetConcurrency);	
	}

	public Statement createStatement(int resultSetType,int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return con.createStatement(resultSetType,resultSetConcurrency,resultSetHoldability);	
	}

	public boolean getAutoCommit() throws SQLException {
		return con.getAutoCommit();
	}

	public String getCatalog() throws SQLException {
		return con.getCatalog();
	}

	public int getHoldability() throws SQLException {
		return con.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return con.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException {
		return con.getTransactionIsolation();
	}

	public Map getTypeMap() throws SQLException {
		return con.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException {
		return con.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return con.isClosed();
	}

	public boolean isReadOnly() throws SQLException {
		return con.isReadOnly();
	}

	public String nativeSQL(String sql) throws SQLException {
		return con.nativeSQL(sql);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return con.prepareCall(sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return con.prepareCall(sql,resultSetType,resultSetConcurrency);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return con.prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return con.prepareStatement(sql);
	}

	public PreparedStatement prepareStatement(String sql,int autoGeneratedKeys) throws SQLException {
		return con.prepareStatement(sql,autoGeneratedKeys);
	}

	public PreparedStatement prepareStatement(String sql,int[] columnIndexed) throws SQLException {
		return con.prepareStatement(sql,columnIndexed);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return con.prepareStatement(sql,resultSetType,resultSetConcurrency);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return con.prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return con.prepareStatement(sql,columnNames);
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		con.releaseSavepoint(savepoint);
	}

	public void rollback() throws SQLException {
		con.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		con.rollback(savepoint);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		con.setAutoCommit(autoCommit);
	}

	public void setCatalog(String catalog) throws SQLException {
		con.setCatalog(catalog);
	}

	public void setHoldability(int holdability) throws SQLException {
		con.setHoldability(holdability);
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		con.setReadOnly(readOnly);
	}

	public Savepoint setSavepoint() throws SQLException {
		return con.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return 	con.setSavepoint(name);
	}

	public void setTransactionIsolation(int level) throws SQLException {
		con.setTransactionIsolation(level);
	}

	public void setTypeMap(Map map) throws SQLException {
		con.setTypeMap(map);
	}

	public Array createArrayOf(String arg0, Object[] arg1) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML createSQLXML() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Struct createStruct(String arg0, Object[] arg1) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public String getClientInfo(String arg0) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isValid(int arg0) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setClientInfo(Properties arg0) throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public void setClientInfo(String arg0, String arg1) throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public boolean isWrapperFor(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public Object unwrap(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
}
